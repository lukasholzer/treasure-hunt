name: Deployment üöÄ

on:
  push:
    branches:
      - master
      - continous-integration

jobs:
  deployment:
    runs-on: ubuntu-latest
    env:
      IMAGE_NGINX: treasurehunt/nginx
      IMAGE_API: treasurehunt/api
      IMAGE_APP: treasurehunt/app
      SSH_AUTH_SOCK: /tmp/ssh_agent.sock
      DROPLET_PATH: /var/www/treasure-hunt.app
    steps:
      - uses: actions/checkout@v2

      - name: Cache node modules üóÑ
        uses: actions/cache@v1
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Setup Node.js üêç
        uses: actions/setup-node@v1
        with:
          node-version: '12.x'

      - name: Install Dependencies ‚öôÔ∏è
        run: npm ci

      - name: Add SSH keys üîê
        run: |
          mkdir -p ~/.ssh
          ssh-keyscan "$DROPLET_IP" >> ~/.ssh/known_hosts
          ssh-agent -a "$SSH_AUTH_SOCK" > /dev/null
          ssh-add - <<< "$SSH_PRIVATE_KEY"
        shell: bash
        env:
          DROPLET_IP: ${{secrets.DROPLET_IP}}
          SSH_PRIVATE_KEY: ${{secrets.SSH_PRIVATE_KEY}}

      - name: Build Application üì¶
        run: |
          npm run nx build api -- --configuration=production
          npm run nx build app -- --configuration=production

      - name: Write SSL keys üîí
        run: |
          mkdir ./.ssl
          echo "$SSL_KEY" > ./.ssl/treasure-hunt.app-key.pem
          echo "$SSL_CRT" > ./.ssl/treasure-hunt.app.pem
          echo "$SSL_DHPARAM" > ./.ssl/dhparam.pem
        shell: bash
        env:
          SSH_KEY: ${{secrets.SSH_KEY}}
          SSL_CRT: ${{secrets.SSL_CRT}}
          SSL_DHPARAM: ${{secrets.SSL_DHPARAM}}

      - name: Build and publish Docker images üê≥
        run: |
          docker login -u ${DOCKER_USERNAME} -p ${DOCKER_PASSWORD}

          docker pull ${IMAGE_NGINX}:latest || true
          docker pull ${IMAGE_API}:latest || true

          docker build --cache-from ${IMAGE_NGINX}:latest -t ${IMAGE_NGINX}:latest ./ -f ./.deployment/nginx/Dockerfile
          docker build --cache-from ${IMAGE_API}:latest -t ${IMAGE_API}:latest ./  -f ./apps/api/Dockerfile

          docker push ${IMAGE_NGINX}:latest
          docker push ${IMAGE_API}:latest
        env:
          DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
          DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}

      - name: Deploy dist üõ´
        run: |
          scp -r \
            ./docker-compose.yml \
            ./docker-compose.override.yml \
            ${DROPLET_USER}@${DROPLET_IP}:${DROPLET_PATH}/
        shell: bash
        env:
          DROPLET_IP: ${{secrets.DROPLET_IP}}
          DROPLET_USER: ${{secrets.DROPLET_USER}}

      - name: Restarting the Docker images ‚ôªÔ∏è
        run: |
          ssh ${DROPLET_USER}@${DROPLET_IP} /bin/bash << EOF
            cd "${DROPLET_PATH}"
            FILES="-f ./docker-compose.yml -f ./docker-compose.override.yml"

            docker-compose $FILES down -v
            docker-compose $FILES pull
            docker-compose $FILES up -d --force-recreate
          EOF
        shell: bash
        env:
          DROPLET_USER: ${{ secrets.DROPLET_USER }}
          DROPLET_IP: ${{ secrets.DROPLET_IP }}




